[gd_scene load_steps=6 format=2]

[ext_resource path="res://Planets/GasPlanet/GasPlanet.gd" type="Script" id=1]
[ext_resource path="res://Planets/GasPlanet/GasPlanet.shader" type="Shader" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float pixels : hint_range(10,100);
uniform float cloud_cover : hint_range(0.0, 1.0);
uniform vec2 light_origin = vec2(0.39, 0.39);
uniform float time_speed : hint_range(-1.0, 1.0) = 0.2;
uniform float stretch : hint_range(1.0,3.0) = 2.0;
uniform float cloud_curve : hint_range(1.0, 2.0) = 1.3;
uniform float light_border_1 : hint_range(0.0, 1.0) = 0.52;
uniform float light_border_2 : hint_range(0.0, 1.0) = 0.62;

uniform vec4 base_color : hint_color;
uniform vec4 outline_color : hint_color;
uniform vec4 shadow_base_color : hint_color;
uniform vec4 shadow_outline_color : hint_color;

uniform float time_elapsed;
uniform float size = 50.0;
uniform int OCTAVES : hint_range(0, 20, 1);
uniform float seed: hint_range(1, 10);

float rand(vec2 coord) {
	return fract(sin(dot(coord.xy ,vec2(12.9898,78.233))) * 43758.5453 * seed);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES ; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

vec2 hash( float n ) {
    float sn = sin(n);
    return fract(vec2(sn,sn*42125.13)*seed);
}
// by Leukbaars from https://www.shadertoy.com/view/4tK3zR
float circleNoise(vec2 uv) {
    float uv_y = floor(uv.y);
    uv.x += uv_y*.31;
    vec2 f = fract(uv);
    vec2 h = hash(floor(uv.x)*uv_y);
    float m = (length(f-0.25-(h.x*0.5)));
    float r = h.y*0.25;
    return smoothstep(0.0, r, m*0.75);
}

float cloud_alpha(vec2 uv, float time) {
	float c_noise = 0.0;


	// more iterations for more turbulence
	for (int i = 0; i < 15; i++) {
		c_noise += circleNoise((uv * size *0.3) + (float(i+1)*10.) + (vec2(time*0.1, 0.0)));
	}
	float fbm = fbm(uv*size+c_noise + vec2(time*0.5, 0.0));

	return fbm;//step(a_cutoff, fbm);
}

bool dither(vec2 uv_pixel, vec2 uv_real) {
	return mod(uv_pixel.x+uv_real.y,2.0/pixels) <= 1.0 / pixels;
}

vec2 spherify(vec2 uv) {
	vec2 centered= uv *2.0-1.0;
	float z = sqrt(1.0 - dot(centered.xy, centered.xy));
	vec2 sphere = centered/(z + 1.0);
	return sphere * 0.5+0.5;
}

void fragment() {
	// pixelize uv
	vec2 uv = floor(UV*pixels)/pixels;

	// distance to light source
	float d_light = distance(uv , light_origin);

	// map to sphere
	uv = spherify(uv);
	// slightly make uv go down on the right, and up in the left
	uv.y += smoothstep(0.0, cloud_curve, abs(uv.x-0.4));


	float c = cloud_alpha(uv*vec2(1.0, stretch), time_elapsed*time_speed);

	// assign some colors based on cloud depth & distance from light
	vec3 col = base_color.rgb;
	if (c < cloud_cover + 0.03) {
		col = outline_color.rgb;
	}
	if (d_light + c*0.2 > light_border_1) {
		col = shadow_base_color.rgb;

	}
	if (d_light + c*0.2 > light_border_2) {
		col = shadow_outline_color.rgb;
	}



	COLOR = vec4(col, step(cloud_cover, c));
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/pixels = 100.0
shader_param/cloud_cover = 0.0
shader_param/light_origin = Vector2( 0.25, 0.25 )
shader_param/time_speed = 0.7
shader_param/stretch = 1.0
shader_param/cloud_curve = 1.3
shader_param/light_border_1 = 0.692
shader_param/light_border_2 = 0.666
shader_param/base_color = Color( 0.231373, 0.12549, 0.152941, 1 )
shader_param/outline_color = Color( 0.231373, 0.12549, 0.152941, 1 )
shader_param/shadow_base_color = Color( 0.129412, 0.0941176, 0.105882, 1 )
shader_param/shadow_outline_color = Color( 0.129412, 0.0941176, 0.105882, 1 )
shader_param/time_elapsed = null
shader_param/size = 9.0
shader_param/OCTAVES = 5
shader_param/seed = 5.939

[sub_resource type="ShaderMaterial" id=3]
shader = ExtResource( 2 )
shader_param/pixels = 100.0
shader_param/cloud_cover = 0.538
shader_param/light_origin = Vector2( 0.25, 0.25 )
shader_param/time_speed = 0.47
shader_param/stretch = 1.0
shader_param/cloud_curve = 1.3
shader_param/light_border_1 = 0.439
shader_param/light_border_2 = 0.746
shader_param/base_color = Color( 0.941176, 0.709804, 0.254902, 1 )
shader_param/outline_color = Color( 0.811765, 0.458824, 0.168627, 1 )
shader_param/shadow_base_color = Color( 0.670588, 0.317647, 0.188235, 1 )
shader_param/shadow_outline_color = Color( 0.490196, 0.219608, 0.2, 1 )
shader_param/time_elapsed = null
shader_param/size = 9.0
shader_param/OCTAVES = 5
shader_param/seed = 5.939

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = -212.0
rect_min_size = Vector2( 200, 200 )
rect_pivot_offset = Vector2( 100, 100 )
script = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Cloud" type="ColorRect" parent="."]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Cloud2" type="ColorRect" parent="."]
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}
